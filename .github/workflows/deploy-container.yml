name: Build and Deploy to Azure Container Apps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  ACR_NAME: acr67d40114dev
  ACR_LOGIN_SERVER: acr67d40114dev.azurecr.io
  ACA_ENVIRONMENT: aca-env-67d40114-dev
  RESOURCE_GROUP: rg-core-dev
  APP_NAME: bff
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
          ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:latest
        platforms: linux/amd64

    - name: Criar ou atualizar Container App
      run: |
        # Verificar se o container app existe
        if az containerapp show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --output none 2>/dev/null; then
          echo "üì¶ Atualizando Container App existente..."
          az containerapp update \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} \
            --set properties.configuration.ingress.external=false \
            --set properties.configuration.ingress.targetPort=3333
        else
          echo "üÜï Criando novo Container App..."
          az containerapp create \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.ACA_ENVIRONMENT }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} \
            --target-port 3333 \
            --ingress internal \
            --registry-server ${{ env.ACR_LOGIN_SERVER }} \
            --registry-username $(az acr credential show --name ${{ env.ACR_NAME }} --query username -o tsv) \
            --registry-password $(az acr credential show --name ${{ env.ACR_NAME }} --query passwords[0].value -o tsv)
        fi

    - name: Configurar vari√°veis de ambiente
      run: |
        az containerapp update \
          --name ${{ env.APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --set-env-vars SWAGGER_DOCS_USERNAME=backendteam \
                         SWAGGER_DOCS_PASSWORD=miraman \
                         CORS_ALLOWED_ORIGINS=""

    - name: Get Container App Internal FQDN
      run: |
        INTERNAL_FQDN=$(az containerapp show \
          --name ${{ env.APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" -o tsv)
        echo "Container App Internal FQDN: $INTERNAL_FQDN"
        echo "INTERNAL_FQDN=$INTERNAL_FQDN" >> $GITHUB_ENV

    - name: Health Check
      run: |
        echo "‚è≥ Aguardando aplica√ß√£o ficar pronta..."
        sleep 30
        
        # Health check usando DNS interno
        for i in {1..5}; do
          echo "üîç Tentativa $i de health check..."
          if curl -f "http://${{ env.INTERNAL_FQDN }}:3333/health"; then
            echo "‚úÖ Health check passou!"
            break
          else
            echo "‚ùå Health check falhou, tentando novamente em 10 segundos..."
            sleep 10
          fi
        done

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Deploy conclu√≠do com sucesso!**
            
            **Container App:** ${{ env.APP_NAME }}
            **Internal FQDN:** ${{ env.INTERNAL_FQDN }}
            **Image:** ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
            **Environment:** ${{ env.ACA_ENVIRONMENT }}
            **Ingress:** Internal (VNet-only)
            
            A aplica√ß√£o foi deployada com acesso interno na VNet. Use o APIM para acesso externo.`
          })
